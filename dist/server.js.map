{"version":3,"sources":["../src/server.ts","../src/app.ts","../src/middlewares/error.middlewares.ts","../src/middlewares/log.middlewares.ts","../src/routes/order.routes.ts","../src/schemas/order.schema.ts","../src/services/order.service.ts","../src/utils/error.utils.ts","../src/utils/fetch.utils.ts","../src/utils/constants.utils.ts","../src/controllers/order.controller.ts","../src/routes/product.routes.ts","../src/controllers/product.controller.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nimport app from './app'\r\nimport { PORT } from './utils/constants.utils'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nconst startServer = (): void => {\r\n  app.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`)\r\n  })\r\n}\r\n\r\nstartServer()\r\n\r\n// Graceful shutdown\r\nprocess.on('SIGTERM', async () => {\r\n  await prisma.$disconnect()\r\n  process.exit(0)\r\n})\r\n","import express from 'express'\r\nimport { errorHandler } from './middlewares/error.middlewares'\r\nimport { requestLogger } from './middlewares/log.middlewares'\r\nimport orderRoutes from './routes/order.routes'\r\nimport productRoutes from './routes/product.routes'\r\n\r\nconst app = express()\r\n\r\napp.use(express.json())\r\n\r\napp.use(requestLogger)\r\n\r\n// Routes\r\napp.use('/products', productRoutes)\r\napp.use('/order', orderRoutes)\r\n\r\napp.use(errorHandler as any)\r\n\r\nexport default app\r\n","import { Response } from 'express'\r\nimport { ZodError } from 'zod'\r\nimport { ApiError } from '../utils/types.utils'\r\n\r\nexport const errorHandler = (\r\n  err: Error | ApiError | ZodError,\r\n  res: Response\r\n): void => {\r\n  console.error(`[${new Date().toISOString()}] ${err.stack}`)\r\n\r\n  if (err instanceof ZodError) {\r\n    res.status(400).json({\r\n      error: 'Validation error',\r\n      details: err.errors,\r\n    })\r\n    return\r\n  }\r\n\r\n  const statusCode = (err as ApiError).statusCode || 500\r\n  res.status(statusCode).json({\r\n    error: err.message || 'An unexpected error occurred',\r\n  })\r\n}\r\n","import { NextFunction, Request, Response } from 'express'\r\n\r\nexport const requestLogger = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  const start = Date.now()\r\n  res.on('finish', () => {\r\n    const duration = Date.now() - start\r\n    console.log(\r\n      `[${new Date().toISOString()}] ${req.method} ${req.url} - ${\r\n        res.statusCode\r\n      } ${duration}ms`\r\n    )\r\n  })\r\n  next()\r\n}\r\n","import express from 'express'\r\nimport { createOrder } from '../controllers/order.controller'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.post('/', createOrder)\r\n\r\nexport default router\r\n","import { z } from 'zod'\r\n\r\nexport type OrderSchemaType = z.infer<typeof orderSchema>\r\n\r\nexport const orderSchema = z.object({\r\n  productId: z.number().positive(),\r\n  quantity: z.number().min(1),\r\n})\r\n","import { Order, PrismaClient } from '@prisma/client'\r\n\r\nimport { OrderSchemaType } from '../schemas/order.schema'\r\n\r\nimport { createError } from '../utils/error.utils'\r\nimport { Product } from '../utils/types.utils'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport const OrderService = {\r\n  validateProduct: (products: Product[], productId: number): Product => {\r\n    const product = products.find((p) => p.id === productId)\r\n    if (!product) {\r\n      throw createError('Product not found', 404)\r\n    }\r\n    if (!product.inStock) {\r\n      throw createError('Product is out of stock', 400)\r\n    }\r\n    return product\r\n  },\r\n\r\n  createOrder: async (orderData: OrderSchemaType): Promise<Order> => {\r\n    return await prisma.order.create({\r\n      data: {\r\n        product_id: orderData.productId,\r\n        quantity: orderData.quantity,\r\n      },\r\n    })\r\n  },\r\n}\r\n","import { ApiError } from './types.utils'\r\n\r\nexport const createError = (message: string, statusCode: number): ApiError => {\r\n  const error: ApiError = new Error(message)\r\n  error.statusCode = statusCode\r\n  return error\r\n}\r\n","import got from 'got'\r\n\r\nimport { PRODUCT_API_URL } from './constants.utils'\r\nimport { createError } from './error.utils'\r\nimport { Product } from './types.utils'\r\nimport { IResData } from './types.utils.js'\r\n\r\nconst PRODUCTS_CACHE_KEY = 'products'\r\n\r\nexport const fetchProducts = async (): Promise<Product[]> => {\r\n  try {\r\n    const response = await got.get(PRODUCT_API_URL).json<IResData[]>()\r\n    console.log(response)\r\n    const products = response.map((item) => ({\r\n      id: item.id,\r\n      name: item.title,\r\n      price: Math.round(Math.random() * 1000),\r\n      inStock: item.id % 2 !== 0,\r\n    }))\r\n\r\n    return products\r\n  } catch (error) {\r\n    throw createError('Failed to fetch products', 503)\r\n  }\r\n}\r\n","export const PRODUCT_API_URL = 'https://jsonplaceholder.typicode.com/posts'\r\nexport const PORT = process.env.PORT || 3000","import { NextFunction, Request, Response } from 'express'\r\nimport { orderSchema } from '../schemas/order.schema'\r\nimport { OrderService } from '../services/order.service'\r\nimport { fetchProducts } from '../utils/fetch.utils'\r\n\r\nexport const createOrder = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): Promise<void> => {\r\n  try {\r\n    const validatedData = orderSchema.parse(req.body)\r\n\r\n    const products = await fetchProducts()\r\n    const product = OrderService.validateProduct(\r\n      products,\r\n      validatedData.productId\r\n    )\r\n\r\n    const order = await OrderService.createOrder(validatedData)\r\n\r\n    res.status(201).json({\r\n      message: 'Order placed successfully',\r\n      order,\r\n      product,\r\n    })\r\n  } catch (error) {\r\n    next(error)\r\n  }\r\n}\r\n","import express from 'express'\r\nimport { getProducts } from '../controllers/product.controller'\r\n\r\nconst router = express.Router()\r\n\r\nrouter.get('/', getProducts)\r\n\r\nexport default router\r\n","import { NextFunction, Request, Response } from 'express'\r\n\r\nimport { fetchProducts } from '../utils/fetch.utils'\r\n\r\nexport const getProducts = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    const page = parseInt(req.query.page as string, 10) || 1\r\n    const limit = parseInt(req.query.limit as string, 10) || 10\r\n    const startIndex = (page - 1) * limit\r\n\r\n    const products = await fetchProducts()\r\n    const paginatedProducts = products.slice(startIndex, startIndex + limit)\r\n\r\n    res.json({\r\n      currentPage: page,\r\n      totalPages: Math.ceil(products.length / limit),\r\n      products: paginatedProducts,\r\n    })\r\n  } catch (error) {\r\n    next(error)\r\n  }\r\n}\r\n"],"mappings":"+EAAA,OAAS,gBAAAA,MAAoB,iBCA7B,OAAOC,MAAa,UCCpB,OAAS,YAAAC,MAAgB,MAGlB,IAAMC,EAAeC,EAAA,CAC1BC,EACAC,IACS,CAGT,GAFA,QAAQ,MAAM,IAAI,IAAI,KAAK,EAAE,YAAY,CAAC,KAAKD,EAAI,KAAK,EAAE,EAEtDA,aAAeE,EAAU,CAC3BD,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,MAAO,mBACP,QAASD,EAAI,MACf,CAAC,EACD,MACF,CAEA,IAAMG,EAAcH,EAAiB,YAAc,IACnDC,EAAI,OAAOE,CAAU,EAAE,KAAK,CAC1B,MAAOH,EAAI,SAAW,8BACxB,CAAC,CACH,EAlB4B,gBCFrB,IAAMI,EAAgBC,EAAA,CAC3BC,EACAC,EACAC,IACS,CACT,IAAMC,EAAQ,KAAK,IAAI,EACvBF,EAAI,GAAG,SAAU,IAAM,CACrB,IAAMG,EAAW,KAAK,IAAI,EAAID,EAC9B,QAAQ,IACN,IAAI,IAAI,KAAK,EAAE,YAAY,CAAC,KAAKH,EAAI,MAAM,IAAIA,EAAI,GAAG,MACpDC,EAAI,UACN,IAAIG,CAAQ,IACd,CACF,CAAC,EACDF,EAAK,CACP,EAf6B,iBCF7B,OAAOG,MAAa,UCApB,OAAS,KAAAC,MAAS,MAIX,IAAMC,EAAcD,EAAE,OAAO,CAClC,UAAWA,EAAE,OAAO,EAAE,SAAS,EAC/B,SAAUA,EAAE,OAAO,EAAE,IAAI,CAAC,CAC5B,CAAC,ECPD,OAAgB,gBAAAE,MAAoB,iBCE7B,IAAMC,EAAcC,EAAA,CAACC,EAAiBC,IAAiC,CAC5E,IAAMC,EAAkB,IAAI,MAAMF,CAAO,EACzC,OAAAE,EAAM,WAAaD,EACZC,CACT,EAJ2B,eDK3B,IAAMC,EAAS,IAAIC,EAENC,EAAe,CAC1B,gBAAiBC,EAAA,CAACC,EAAqBC,IAA+B,CACpE,IAAMC,EAAUF,EAAS,KAAMG,GAAMA,EAAE,KAAOF,CAAS,EACvD,GAAI,CAACC,EACH,MAAME,EAAY,oBAAqB,GAAG,EAE5C,GAAI,CAACF,EAAQ,QACX,MAAME,EAAY,0BAA2B,GAAG,EAElD,OAAOF,CACT,EATiB,mBAWjB,YAAaH,EAAA,MAAOM,GACX,MAAMT,EAAO,MAAM,OAAO,CAC/B,KAAM,CACJ,WAAYS,EAAU,UACtB,SAAUA,EAAU,QACtB,CACF,CAAC,EANU,cAQf,EE7BA,OAAOC,MAAS,MCAT,IAAMC,EAAkB,6CAClBC,EAAO,QAAQ,IAAI,MAAQ,IDQjC,IAAMC,EAAgBC,EAAA,SAAgC,CAC3D,GAAI,CACF,IAAMC,EAAW,MAAMC,EAAI,IAAIC,CAAe,EAAE,KAAiB,EACjE,eAAQ,IAAIF,CAAQ,EACHA,EAAS,IAAKG,IAAU,CACvC,GAAIA,EAAK,GACT,KAAMA,EAAK,MACX,MAAO,KAAK,MAAM,KAAK,OAAO,EAAI,GAAI,EACtC,QAASA,EAAK,GAAK,IAAM,CAC3B,EAAE,CAGJ,MAAgB,CACd,MAAMC,EAAY,2BAA4B,GAAG,CACnD,CACF,EAf6B,iBEJtB,IAAMC,EAAcC,EAAA,MACzBC,EACAC,EACAC,IACkB,CAClB,GAAI,CACF,IAAMC,EAAgBC,EAAY,MAAMJ,EAAI,IAAI,EAE1CK,EAAW,MAAMC,EAAc,EAC/BC,EAAUC,EAAa,gBAC3BH,EACAF,EAAc,SAChB,EAEMM,EAAQ,MAAMD,EAAa,YAAYL,CAAa,EAE1DF,EAAI,OAAO,GAAG,EAAE,KAAK,CACnB,QAAS,4BACT,MAAAQ,EACA,QAAAF,CACF,CAAC,CACH,OAASG,EAAO,CACdR,EAAKQ,CAAK,CACZ,CACF,EAxB2B,eNF3B,IAAMC,EAASC,EAAQ,OAAO,EAE9BD,EAAO,KAAK,IAAKE,CAAW,EAE5B,IAAOC,EAAQH,EOPf,OAAOI,MAAa,UCIb,IAAMC,EAAcC,EAAA,MACzBC,EACAC,EACAC,IACG,CACH,GAAI,CACF,IAAMC,EAAO,SAASH,EAAI,MAAM,KAAgB,EAAE,GAAK,EACjDI,EAAQ,SAASJ,EAAI,MAAM,MAAiB,EAAE,GAAK,GACnDK,GAAcF,EAAO,GAAKC,EAE1BE,EAAW,MAAMC,EAAc,EAC/BC,EAAoBF,EAAS,MAAMD,EAAYA,EAAaD,CAAK,EAEvEH,EAAI,KAAK,CACP,YAAaE,EACb,WAAY,KAAK,KAAKG,EAAS,OAASF,CAAK,EAC7C,SAAUI,CACZ,CAAC,CACH,OAASC,EAAO,CACdP,EAAKO,CAAK,CACZ,CACF,EArB2B,eDD3B,IAAMC,EAASC,EAAQ,OAAO,EAE9BD,EAAO,IAAI,IAAKE,CAAW,EAE3B,IAAOC,EAAQH,EVDf,IAAMI,EAAMC,EAAQ,EAEpBD,EAAI,IAAIC,EAAQ,KAAK,CAAC,EAEtBD,EAAI,IAAIE,CAAa,EAGrBF,EAAI,IAAI,YAAaG,CAAa,EAClCH,EAAI,IAAI,SAAUI,CAAW,EAE7BJ,EAAI,IAAIK,CAAmB,EAE3B,IAAOC,EAAQN,EDbf,IAAMO,EAAS,IAAIC,EAEbC,EAAcC,EAAA,IAAY,CAC9BC,EAAI,OAAOC,EAAM,IAAM,CACrB,QAAQ,IAAI,yCAAyCA,CAAI,EAAE,CAC7D,CAAC,CACH,EAJoB,eAMpBH,EAAY,EAGZ,QAAQ,GAAG,UAAW,SAAY,CAChC,MAAMF,EAAO,YAAY,EACzB,QAAQ,KAAK,CAAC,CAChB,CAAC","names":["PrismaClient","express","ZodError","errorHandler","__name","err","res","ZodError","statusCode","requestLogger","__name","req","res","next","start","duration","express","z","orderSchema","PrismaClient","createError","__name","message","statusCode","error","prisma","PrismaClient","OrderService","__name","products","productId","product","p","createError","orderData","got","PRODUCT_API_URL","PORT","fetchProducts","__name","response","got","PRODUCT_API_URL","item","createError","createOrder","__name","req","res","next","validatedData","orderSchema","products","fetchProducts","product","OrderService","order","error","router","express","createOrder","order_routes_default","express","getProducts","__name","req","res","next","page","limit","startIndex","products","fetchProducts","paginatedProducts","error","router","express","getProducts","product_routes_default","app","express","requestLogger","product_routes_default","order_routes_default","errorHandler","app_default","prisma","PrismaClient","startServer","__name","app_default","PORT"]}